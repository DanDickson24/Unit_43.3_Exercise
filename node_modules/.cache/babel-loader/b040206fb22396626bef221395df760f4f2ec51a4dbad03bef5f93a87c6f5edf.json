{"ast":null,"code":"var _jsxFileName = \"/home/dan/SchoolWork/Unit_43.3/exercise/src/JokeList.js\",\n  _s = $RefreshSig$();\n// import React, { Component } from \"react\";\n// import axios from \"axios\";\n// import Joke from \"./Joke\";\n// import \"./JokeList.css\";\n\n// /** List of jokes. */\n\n// class JokeList extends Component {\n//   static defaultProps = {\n//     numJokesToGet: 5\n//   };\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       jokes: [],\n//       isLoading: true\n//     };\n\n//     this.generateNewJokes = this.generateNewJokes.bind(this);\n//     this.vote = this.vote.bind(this);\n//   }\n\n//   /* at mount, get jokes */\n\n//   componentDidMount() {\n//     this.getJokes();\n//   }\n\n//   /* retrieve jokes from API */\n\n//   async getJokes() {\n//     try {\n//       // load jokes one at a time, adding not-yet-seen jokes\n//       let jokes = [];\n//       let seenJokes = new Set();\n\n//       while (jokes.length < this.props.numJokesToGet) {\n//         let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//           headers: { Accept: \"application/json\" }\n//         });\n//         let { ...joke } = res.data;\n\n//         if (!seenJokes.has(joke.id)) {\n//           seenJokes.add(joke.id);\n//           jokes.push({ ...joke, votes: 0 });\n//         } else {\n//           console.log(\"duplicate found!\");\n//         }\n//       }\n\n//       this.setState({ jokes, isLoading: false });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   /* empty joke list, set to loading state, and then call getJokes */\n\n//   generateNewJokes() {\n//     this.setState({ isLoading: true});\n//     this.getJokes();\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   vote(id, delta) {\n//     this.setState(st => ({\n//       jokes: st.jokes.map(j =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     }));\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   render() {\n//     let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n//     if (this.state.isLoading) {\n//       return (\n//         <div className=\"loading\">\n//           <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//         </div>\n//       )\n//     }\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button\n//           className=\"JokeList-getmore\"\n//           onClick={this.generateNewJokes}\n//         >\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke\n//             text={j.joke}\n//             key={j.id}\n//             id={j.id}\n//             votes={j.votes}\n//             vote={this.vote}\n//           />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n\n// export default JokeList;\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import axios from \"axios\";\n// import Joke from \"./Joke\";\n// import \"./JokeList.css\";\n\n// function JokeList({ numJokesToGet }) {\n//   const [jokes, setJokes] = useState([]);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   const getJokes = useCallback(async () => {\n//     try {\n//       const newJokes = [];\n\n//       // Fetch new jokes and add them to newJokes\n//       while (newJokes.length < numJokesToGet) {\n//         const response = await axios.get(\"https://icanhazdadjoke.com/\", {\n//           headers: { Accept: \"application/json\" },\n//         });\n\n//         const newJoke = response.data;\n//         newJokes.push({ ...newJoke, votes: 0 });\n//       }\n\n//       // Combine new jokes with locked jokes and update the state\n//       setJokes((prevJokes) => {\n//         const updatedJokes = [...newJokes, ...prevJokes.filter((j) => j.locked)];\n//         return updatedJokes;\n//       });\n\n//       setIsLoading(false);\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }, [numJokesToGet]);\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       try {\n//         await getJokes();\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     }\n\n//     fetchData();\n//   }, [getJokes]);\n\n//   function generateNewJokes() {\n//     setIsLoading(true);\n//     getJokes();\n//   }\n\n//   function vote(id, delta) {\n//     setJokes((prevJokes) =>\n//       prevJokes.map((j) =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     );\n//   }\n\n//   function resetVotesAndLocalStorage() {\n//     // Reset votes to 0 for all jokes\n//     setJokes((prevJokes) =>\n//       prevJokes.map((j) => ({ ...j, votes: 0 }))\n//     );\n\n//     // Clear local storage\n//     localStorage.clear();\n//   }\n\n//   let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n//   if (isLoading) {\n//     return (\n//       <div className=\"loading\">\n//         <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"JokeList\">\n//       <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//         Get New Jokes\n//       </button>\n\n//       <button className=\"JokeList-reset\" onClick={resetVotesAndLocalStorage}>\n//         Reset Votes and Clear Local Storage\n//       </button>\n\n//       {sortedJokes.map((j) => (\n//         <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default JokeList;\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JokeList({\n  numJokesToGet\n}) {\n  _s();\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const getJokes = useCallback(async () => {\n    try {\n      const newJokes = [];\n\n      // Fetch new jokes and add them to newJokes\n      while (newJokes.length < numJokesToGet) {\n        const response = await axios.get(\"https://icanhazdadjoke.com/\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n        const newJoke = response.data;\n        newJokes.push({\n          ...newJoke,\n          votes: 0,\n          locked: false\n        });\n      }\n\n      // Combine new jokes with locked jokes and update the state\n      setJokes(prevJokes => {\n        const updatedJokes = [...newJokes, ...prevJokes.filter(j => j.locked)];\n        return updatedJokes;\n      });\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }, [numJokesToGet]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        await getJokes();\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    fetchData();\n  }, [getJokes]);\n  function generateNewJokes() {\n    setIsLoading(true);\n    getJokes();\n  }\n  function vote(id, delta) {\n    setJokes(prevJokes => prevJokes.map(j => j.id === id ? {\n      ...j,\n      votes: j.votes + delta\n    } : j));\n  }\n  function resetVotesAndLocalStorage() {\n    // Reset votes to 0 for all jokes\n    setJokes(prevJokes => prevJokes.map(j => ({\n      ...j,\n      votes: 0\n    })));\n\n    // Clear local storage\n    localStorage.clear();\n  }\n  function toggleLock(id) {\n    setJokes(prevJokes => prevJokes.map(j => j.id === id ? {\n      ...j,\n      locked: !j.locked\n    } : j));\n  }\n  let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-4x fa-spinner fa-spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"JokeList\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"JokeList-getmore\",\n      onClick: generateNewJokes,\n      children: \"Get New Jokes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"JokeList-reset\",\n      onClick: resetVotesAndLocalStorage,\n      children: \"Reset Votes and Clear Local Storage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), sortedJokes.map(j => /*#__PURE__*/_jsxDEV(Joke, {\n      text: j.joke,\n      id: j.id,\n      votes: j.votes,\n      vote: vote,\n      locked: j.locked,\n      toggleLock: () => toggleLock(j.id)\n    }, j.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n}\n_s(JokeList, \"cqeTehAR4yJfYvBYCea6qy7KG44=\");\n_c = JokeList;\nexport default JokeList;\nvar _c;\n$RefreshReg$(_c, \"JokeList\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","Joke","jsxDEV","_jsxDEV","JokeList","numJokesToGet","_s","jokes","setJokes","isLoading","setIsLoading","getJokes","newJokes","length","response","get","headers","Accept","newJoke","data","push","votes","locked","prevJokes","updatedJokes","filter","j","err","console","error","fetchData","generateNewJokes","vote","id","delta","map","resetVotesAndLocalStorage","localStorage","clear","toggleLock","sortedJokes","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","text","joke","_c","$RefreshReg$"],"sources":["/home/dan/SchoolWork/Unit_43.3/exercise/src/JokeList.js"],"sourcesContent":["// import React, { Component } from \"react\";\n// import axios from \"axios\";\n// import Joke from \"./Joke\";\n// import \"./JokeList.css\";\n\n// /** List of jokes. */\n\n// class JokeList extends Component {\n//   static defaultProps = {\n//     numJokesToGet: 5\n//   };\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       jokes: [],\n//       isLoading: true\n//     };\n\n//     this.generateNewJokes = this.generateNewJokes.bind(this);\n//     this.vote = this.vote.bind(this);\n//   }\n\n//   /* at mount, get jokes */\n\n//   componentDidMount() {\n//     this.getJokes();\n//   }\n\n//   /* retrieve jokes from API */\n\n//   async getJokes() {\n//     try {\n//       // load jokes one at a time, adding not-yet-seen jokes\n//       let jokes = [];\n//       let seenJokes = new Set();\n\n//       while (jokes.length < this.props.numJokesToGet) {\n//         let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//           headers: { Accept: \"application/json\" }\n//         });\n//         let { ...joke } = res.data;\n\n//         if (!seenJokes.has(joke.id)) {\n//           seenJokes.add(joke.id);\n//           jokes.push({ ...joke, votes: 0 });\n//         } else {\n//           console.log(\"duplicate found!\");\n//         }\n//       }\n\n//       this.setState({ jokes, isLoading: false });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   /* empty joke list, set to loading state, and then call getJokes */\n\n//   generateNewJokes() {\n//     this.setState({ isLoading: true});\n//     this.getJokes();\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   vote(id, delta) {\n//     this.setState(st => ({\n//       jokes: st.jokes.map(j =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     }));\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   render() {\n//     let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n//     if (this.state.isLoading) {\n//       return (\n//         <div className=\"loading\">\n//           <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//         </div>\n//       )\n//     }\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button\n//           className=\"JokeList-getmore\"\n//           onClick={this.generateNewJokes}\n//         >\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke\n//             text={j.joke}\n//             key={j.id}\n//             id={j.id}\n//             votes={j.votes}\n//             vote={this.vote}\n//           />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n\n// export default JokeList;\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import axios from \"axios\";\n// import Joke from \"./Joke\";\n// import \"./JokeList.css\";\n\n// function JokeList({ numJokesToGet }) {\n//   const [jokes, setJokes] = useState([]);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   const getJokes = useCallback(async () => {\n//     try {\n//       const newJokes = [];\n\n//       // Fetch new jokes and add them to newJokes\n//       while (newJokes.length < numJokesToGet) {\n//         const response = await axios.get(\"https://icanhazdadjoke.com/\", {\n//           headers: { Accept: \"application/json\" },\n//         });\n\n//         const newJoke = response.data;\n//         newJokes.push({ ...newJoke, votes: 0 });\n//       }\n\n//       // Combine new jokes with locked jokes and update the state\n//       setJokes((prevJokes) => {\n//         const updatedJokes = [...newJokes, ...prevJokes.filter((j) => j.locked)];\n//         return updatedJokes;\n//       });\n\n//       setIsLoading(false);\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }, [numJokesToGet]);\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       try {\n//         await getJokes();\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     }\n\n//     fetchData();\n//   }, [getJokes]);\n\n//   function generateNewJokes() {\n//     setIsLoading(true);\n//     getJokes();\n//   }\n\n//   function vote(id, delta) {\n//     setJokes((prevJokes) =>\n//       prevJokes.map((j) =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     );\n//   }\n\n//   function resetVotesAndLocalStorage() {\n//     // Reset votes to 0 for all jokes\n//     setJokes((prevJokes) =>\n//       prevJokes.map((j) => ({ ...j, votes: 0 }))\n//     );\n\n//     // Clear local storage\n//     localStorage.clear();\n//   }\n\n//   let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n//   if (isLoading) {\n//     return (\n//       <div className=\"loading\">\n//         <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"JokeList\">\n//       <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//         Get New Jokes\n//       </button>\n\n//       <button className=\"JokeList-reset\" onClick={resetVotesAndLocalStorage}>\n//         Reset Votes and Clear Local Storage\n//       </button>\n\n//       {sortedJokes.map((j) => (\n//         <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default JokeList;\n\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\nfunction JokeList({ numJokesToGet }) {\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getJokes = useCallback(async () => {\n    try {\n      const newJokes = [];\n\n      // Fetch new jokes and add them to newJokes\n      while (newJokes.length < numJokesToGet) {\n        const response = await axios.get(\"https://icanhazdadjoke.com/\", {\n          headers: { Accept: \"application/json\" },\n        });\n\n        const newJoke = response.data;\n        newJokes.push({ ...newJoke, votes: 0, locked: false });\n      }\n\n      // Combine new jokes with locked jokes and update the state\n      setJokes((prevJokes) => {\n        const updatedJokes = [...newJokes, ...prevJokes.filter((j) => j.locked)];\n        return updatedJokes;\n      });\n\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }, [numJokesToGet]);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        await getJokes();\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    fetchData();\n  }, [getJokes]);\n\n  function generateNewJokes() {\n    setIsLoading(true);\n    getJokes();\n  }\n\n  function vote(id, delta) {\n    setJokes((prevJokes) =>\n      prevJokes.map((j) =>\n        j.id === id ? { ...j, votes: j.votes + delta } : j\n      )\n    );\n  }\n\n  function resetVotesAndLocalStorage() {\n    // Reset votes to 0 for all jokes\n    setJokes((prevJokes) =>\n      prevJokes.map((j) => ({ ...j, votes: 0 }))\n    );\n\n    // Clear local storage\n    localStorage.clear();\n  }\n\n  function toggleLock(id) {\n    setJokes((prevJokes) =>\n      prevJokes.map((j) =>\n        j.id === id ? { ...j, locked: !j.locked } : j\n      )\n    );\n  }\n\n  let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n  if (isLoading) {\n    return (\n      <div className=\"loading\">\n        <i className=\"fas fa-4x fa-spinner fa-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"JokeList\">\n      <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n        Get New Jokes\n      </button>\n\n      <button className=\"JokeList-reset\" onClick={resetVotesAndLocalStorage}>\n        Reset Votes and Clear Local Storage\n      </button>\n\n      {sortedJokes.map((j) => (\n        <Joke\n          text={j.joke}\n          key={j.id}\n          id={j.id}\n          votes={j.votes}\n          vote={vote}\n          locked={j.locked}\n          toggleLock={() => toggleLock(j.id)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default JokeList;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,QAAQA,CAAC;EAAEC;AAAc,CAAC,EAAE;EAAAC,EAAA;EACnC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,SAAS,EAAEC,YAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}