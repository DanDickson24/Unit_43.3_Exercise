{"ast":null,"code":"// import React, { Component } from \"react\";\n// import axios from \"axios\";\n// import Joke from \"./Joke\";\n// import \"./JokeList.css\";\n\n// /** List of jokes. */\n\n// class JokeList extends Component {\n//   static defaultProps = {\n//     numJokesToGet: 5\n//   };\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       jokes: [],\n//       isLoading: true\n//     };\n\n//     this.generateNewJokes = this.generateNewJokes.bind(this);\n//     this.vote = this.vote.bind(this);\n//   }\n\n//   /* at mount, get jokes */\n\n//   componentDidMount() {\n//     this.getJokes();\n//   }\n\n//   /* retrieve jokes from API */\n\n//   async getJokes() {\n//     try {\n//       // load jokes one at a time, adding not-yet-seen jokes\n//       let jokes = [];\n//       let seenJokes = new Set();\n\n//       while (jokes.length < this.props.numJokesToGet) {\n//         let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//           headers: { Accept: \"application/json\" }\n//         });\n//         let { ...joke } = res.data;\n\n//         if (!seenJokes.has(joke.id)) {\n//           seenJokes.add(joke.id);\n//           jokes.push({ ...joke, votes: 0 });\n//         } else {\n//           console.log(\"duplicate found!\");\n//         }\n//       }\n\n//       this.setState({ jokes, isLoading: false });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   /* empty joke list, set to loading state, and then call getJokes */\n\n//   generateNewJokes() {\n//     this.setState({ isLoading: true});\n//     this.getJokes();\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   vote(id, delta) {\n//     this.setState(st => ({\n//       jokes: st.jokes.map(j =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     }));\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   render() {\n//     let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n//     if (this.state.isLoading) {\n//       return (\n//         <div className=\"loading\">\n//           <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//         </div>\n//       )\n//     }\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button\n//           className=\"JokeList-getmore\"\n//           onClick={this.generateNewJokes}\n//         >\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke\n//             text={j.joke}\n//             key={j.id}\n//             id={j.id}\n//             votes={j.votes}\n//             vote={this.vote}\n//           />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n\n// export default JokeList;\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import axios from \"axios\";\n// import Joke from \"./Joke\";\n// import \"./JokeList.css\";\n\n// function JokeList({ numJokesToGet }) {\n//   const [jokes, setJokes] = useState([]);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   const getJokes = useCallback(async () => {\n//     try {\n\n//       setJokes(jokes);\n//       setIsLoading(false);\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       try {\n//         await getJokes();\n\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     }\n\n//     fetchData();\n\n//   }, [getJokes]);\n\n//   function generateNewJokes() {\n//     setIsLoading(true);\n//     getJokes();\n//   }\n\n//   function vote(id, delta) {\n//     setJokes((prevJokes) =>\n//       prevJokes.map((j) =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     );\n//   }\n\n//   function resetVotesAndLocalStorage() {\n//     // Reset votes to 0 for all jokes\n//     setJokes((prevJokes) =>\n//       prevJokes.map((j) => ({ ...j, votes: 0 }))\n//     );\n\n//     // Clear local storage\n//     localStorage.clear();\n//   }\n\n//   let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n//   if (isLoading) {\n//     return (\n//       <div className=\"loading\">\n//         <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"JokeList\">\n//       <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//         Get New Jokes\n//       </button>\n\n//       <button className=\"JokeList-reset\" onClick={resetVotesAndLocalStorage}>\n//         Reset Votes and Clear Local Storage\n//       </button>\n\n//       {sortedJokes.map((j) => (\n//         <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default JokeList;","map":{"version":3,"names":[],"sources":["/home/dan/SchoolWork/Unit_43.3/exercise/src/JokeList.js"],"sourcesContent":["// import React, { Component } from \"react\";\n// import axios from \"axios\";\n// import Joke from \"./Joke\";\n// import \"./JokeList.css\";\n\n// /** List of jokes. */\n\n// class JokeList extends Component {\n//   static defaultProps = {\n//     numJokesToGet: 5\n//   };\n\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       jokes: [],\n//       isLoading: true\n//     };\n\n//     this.generateNewJokes = this.generateNewJokes.bind(this);\n//     this.vote = this.vote.bind(this);\n//   }\n\n//   /* at mount, get jokes */\n\n//   componentDidMount() {\n//     this.getJokes();\n//   }\n\n//   /* retrieve jokes from API */\n\n//   async getJokes() {\n//     try {\n//       // load jokes one at a time, adding not-yet-seen jokes\n//       let jokes = [];\n//       let seenJokes = new Set();\n\n//       while (jokes.length < this.props.numJokesToGet) {\n//         let res = await axios.get(\"https://icanhazdadjoke.com\", {\n//           headers: { Accept: \"application/json\" }\n//         });\n//         let { ...joke } = res.data;\n\n//         if (!seenJokes.has(joke.id)) {\n//           seenJokes.add(joke.id);\n//           jokes.push({ ...joke, votes: 0 });\n//         } else {\n//           console.log(\"duplicate found!\");\n//         }\n//       }\n\n//       this.setState({ jokes, isLoading: false });\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }\n\n//   /* empty joke list, set to loading state, and then call getJokes */\n\n//   generateNewJokes() {\n//     this.setState({ isLoading: true});\n//     this.getJokes();\n//   }\n\n//   /* change vote for this id by delta (+1 or -1) */\n\n//   vote(id, delta) {\n//     this.setState(st => ({\n//       jokes: st.jokes.map(j =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     }));\n//   }\n\n//   /* render: either loading spinner or list of sorted jokes. */\n\n//   render() {\n//     let sortedJokes = [...this.state.jokes].sort((a, b) => b.votes - a.votes);\n//     if (this.state.isLoading) {\n//       return (\n//         <div className=\"loading\">\n//           <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//         </div>\n//       )\n//     }\n\n//     return (\n//       <div className=\"JokeList\">\n//         <button\n//           className=\"JokeList-getmore\"\n//           onClick={this.generateNewJokes}\n//         >\n//           Get New Jokes\n//         </button>\n\n//         {sortedJokes.map(j => (\n//           <Joke\n//             text={j.joke}\n//             key={j.id}\n//             id={j.id}\n//             votes={j.votes}\n//             vote={this.vote}\n//           />\n//         ))}\n//       </div>\n//     );\n//   }\n// }\n\n// export default JokeList;\n\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import axios from \"axios\";\n// import Joke from \"./Joke\";\n// import \"./JokeList.css\";\n\n// function JokeList({ numJokesToGet }) {\n//   const [jokes, setJokes] = useState([]);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   const getJokes = useCallback(async () => {\n//     try {\n      \n//       setJokes(jokes);\n//       setIsLoading(false);\n//     } catch (err) {\n//       console.error(err);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     async function fetchData() {\n//       try {\n//         await getJokes();\n\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     }\n\n//     fetchData();\n\n  \n//   }, [getJokes]);\n\n//   function generateNewJokes() {\n//     setIsLoading(true);\n//     getJokes();\n//   }\n\n//   function vote(id, delta) {\n//     setJokes((prevJokes) =>\n//       prevJokes.map((j) =>\n//         j.id === id ? { ...j, votes: j.votes + delta } : j\n//       )\n//     );\n//   }\n\n//   function resetVotesAndLocalStorage() {\n//     // Reset votes to 0 for all jokes\n//     setJokes((prevJokes) =>\n//       prevJokes.map((j) => ({ ...j, votes: 0 }))\n//     );\n\n//     // Clear local storage\n//     localStorage.clear();\n//   }\n\n//   let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n//   if (isLoading) {\n//     return (\n//       <div className=\"loading\">\n//         <i className=\"fas fa-4x fa-spinner fa-spin\" />\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"JokeList\">\n//       <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n//         Get New Jokes\n//       </button>\n\n//       <button className=\"JokeList-reset\" onClick={resetVotesAndLocalStorage}>\n//         Reset Votes and Clear Local Storage\n//       </button>\n\n//       {sortedJokes.map((j) => (\n//         <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default JokeList;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}